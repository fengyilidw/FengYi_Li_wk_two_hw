FengYi_Li_week_three_hw
Part 2:


2.	describe what the addEventListener() method do in the code.

THIS IS HTML:
        <div class="form">
        
            <fieldset>
                <label>Number 1</label>
                <input type="text" id="num1">
            </fieldset>

        
            <fieldset>
                <label>Number 2</label>
                <input type="text" id="num2">
            </fieldset>

        
            <fieldset>
                <button id="add">Click to add</button>
                <h3>Result</h3>
                <span id="result">Result here</span>
            </fieldset>   
    </div>


THIS IS JavaScript:
const addNums = () => {
    let num1 = document.getElementById("num1").value;
    let num2 = document.getElementById("num2").value;
    let sum = parseInt(num1, 10) + parseInt(num2, 10);
    document.getElementById("result").innerHTML = sum;
};

const btnAdd = document.getElementById("add");
btnAdd.addEventListener("click", addNums);


First, I remove the inline onclick attribute from my button tags in my index.html file. 
Then in my JavaScript I added: 
const btnAdd = document.getElementById("add");
btnAdd.addEventListener("click", addNums);
Which I added the new JavaScript to button. The "addEventListener()" method attaches a click event to the button, when the user "clicks" the button, it triggers the "addNums" function which the second argument passed through to addEventListener(“click”, addNums).




3.a referenced function and an invoked (aka called) function. 

referenced function- While calling a function, instead to passing the values of variables which pass address of variables, the location of variables to the function also called “Call By Reference" which both the actual and formal parameters refer to same locations, so any changes made inside the function are actually reflected in actual parameters of caller.

Example:
function callByReference(vardog) { 
  vardog.a = 10; 
  console.log(vardog); 
} 
let varObj = {a:1};

invoked (aka called) function- Calling the function by name, then pass in any required parameters in a comma delimited list enclosed in parenthesis.

Example:
function animal(name) {
    
}
animal("dog");





4. named functions and function expressions.

Named functions- defined by a function declaration if it appears as a statement. So when we create a function, use the keyword of the “function" in order to add the name of the function, it will defined of the “function”.

Example:
function animal () {
  return rank() + "is a pet";
  
  function rank () { return "Dog"; }
}
animal ()
  //=> 'Dog is a pet'


Function expressions- A JavaScript function can also be defined using an expression, and
a function expression can be stored in a variable, such as
var x = function (a, b) {return a * b};
After a function expression has been stored in a variable, the variable can be used as a function:
Example:
var x = function (a, b) {return a * b};
var z = x(4, 3);


5. arrow functions, named functions, and anonymous functions. 

arrow functions- allows a short syntax for writing function expressions, and is defined using a pair of parenthesis that contains the list of parameters (param1, param2, ..., paramN), followed by a fat arrow => and a pair of curly braces {...} that delimits the body statements. In addition, arrow functions does not create its execution context, but takes it lexically which contrary to function expression or function declaration, which create own this depending on invocation. Also, arrow functions is anonymous. However, the engine can infer its name from the variable holding the function. Additionally, arguments object is not available in the arrow function which contrary to other declaration types that provide arguments object. It's free to use rest parameters (...params), though.

EXample:
const absValue = (number) => {
  if (number < 0) {
    return -number;
  }
  return number;
}
absValue(-10); // => 10
absValue(5);   // => 5
In this case, absValue is an arrow function that calculates the absolute value of a number.


named functions- Named functions- defined by a function declaration if it appears as a statement. So when we create a function, use the keyword of the “function" in order to add the name of the function, it will defined of the “function”.

Example:
function animal () {
  return rank() + "is a pet";
  
  function rank () { return "Dog"; }
}
animal ()
  //=> 'Dog is a pet'


anonymous functions- a function that was declared without any named identifier to refer to it. As such, an anonymous function is usually not accessible after its initial creation.

Eexample:
This is normal function definition:

function hello() {
  alert('Hello world');
}
hello();

This is anonymous function definition:
var anon = function() {
  alert('I am anonymous');
}
anon();



6.	toggle-circle exercise. 

In the toggle-circle foler





7.	window.location.reload() means/does

window.location.reload()-is used to reload the current document. The reload() method does the same as the reload button in the browser. By default, the reload() method reloads the page from the cache, but also can force it to reload the page from the server by setting the forceGet parameter to true: location. reload(true).
Syntax
var  = window.location.reload(forceget);
Example:
window.location.reload();


8. local repository to Github

   First, I created a repository on GitHub
   Second, I used “cd” to go into the directory file of my project
   Third, I used “git init” which initializes the Git Repository
   Fourth, I used “git clone” along with the link to my repository to copy it to my repository
   Fifth, I used “git add .” which adds my files to the Git index
   Sixth, I used “git commit -m ‘first commit’” to commit the added files
   Seventh, I used "git remote add origin https://github.com/fengyilidw/FengYi_Li_wk_three_hw.git"
   Finally, I used “git push -u origin master” to push all the files to GitHub



9. Which folder inside your project represents your local Git repository and confirms that you have actually initialized Git in your project

For my homework three, the “.git” folder represents my local Git repository and confirms that I have actually initialized Git in my project.



10.	What else signals to you that you have initialized Git in your (project) folder? 

Nothing disappeared
Nikis-Air:FengYi_Li_wk_three_hw nikili$ ls
FengYi-Li-week-three-hw.txt	style.css
index.html			toggle-circle
main.js
Nikis-Air:FengYi_Li_wk_three_hw nikili$ rm -rf.git
rm: illegal option -- .
usage: rm [-f | -i] [-dPRrvW] file ...
       unlink file
Nikis-Air:FengYi_Li_wk_three_hw nikili$ ls
FengYi-Li-week-three-hw.txt	style.css
index.html			toggle-circle
main.js



